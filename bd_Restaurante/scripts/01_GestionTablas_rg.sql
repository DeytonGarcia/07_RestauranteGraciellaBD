-- Tabla `person`
-- Almacena información sobre las personas en el sistema. Puede representar clientes, empleados, o cualquier tipo de usuario relacionado con la aplicación.
-- Campos principales:
--   - `person_id`: Identificador único para cada persona.
--   - `person_type`: Tipo de persona (ej. cliente, empleado, etc.).
--   - `names` y `surnames`: Nombre y apellidos de la persona, con validaciones para evitar caracteres inválidos.
--   - `phone`, `email`, y `address`: Información de contacto de la persona.
--   - `date_of_birth`: Fecha de nacimiento.
--   - `document_type` y `document_number`: Tipo y número de documento de identidad.
--   - `status`: Estado de la persona (ej. 'ACTIVE' o 'INACTIVE')

CREATE TABLE person (
    person_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    person_type VARCHAR2(50) NOT NULL,
    names VARCHAR2(100) NOT NULL CHECK (
        REGEXP_LIKE(names, '^[A-Za-zÁáÉéÍíÓóÚúÑñ]+(\s+[A-Za-zÁáÉéÍíÓóÚúÑñ]+)*$')
    ),
    surnames VARCHAR2(100) NOT NULL CHECK (
        REGEXP_LIKE(surnames, '^[A-Za-zÁáÉéÍíÓóÚúÑñ]+(\s+[A-Za-zÁáÉéÍíÓóÚúÑñ]+)*$')
    ),
    address VARCHAR2(200),
    phone VARCHAR2(15),
    email VARCHAR2(100),
    date_of_birth DATE,
    document_type VARCHAR2(10),
    document_number CHAR(20) NOT NULL,
    status VARCHAR2(10) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE'))
);

-- Tabla `menu`
-- Define los platos disponibles en el restaurante.
-- Campos principales:
--   - `menu_id`: Identificador único para cada plato.
--   - `dish_name`: Nombre del plato.
--   - `description`: Breve descripción del plato.
--   - `registration_date`: Fecha en la que se registró el plato.
--   - `unit_price`: Precio unitario del plato.
--   - `state`: Estado del plato (ej. 'ACTIVE' o 'INACTIVE')

CREATE TABLE menu (
    menu_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    dish_name VARCHAR2(100) NOT NULL,
    description VARCHAR2(255),
    registration_date DATE DEFAULT SYSDATE,
    entrance VARCHAR2(100),
    second_course VARCHAR2(100),
    dessert VARCHAR2(100),
    unit_price NUMBER(10, 2) CHECK (unit_price > 0),
    amount NUMBER,
    state VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (state IN ('ACTIVE', 'INACTIVE'))  -- Corregido aquí
);

-- Tabla `orders`
-- Registra las órdenes realizadas en el restaurante.
-- Campos principales:
--   - `order_id`: Identificador único para cada orden.
--   - `client_id` y `waiter_id`: Referencias a la tabla `person` para identificar al cliente y al camarero.
--   - `table_number`: Número de la mesa asociada a la orden.
--   - `order_date`: Fecha de creación de la orden.
--   - `total_amount`: Monto total de la orden.
--   - `payment_status`: Estado del pago (ej. 'PENDIENTE', 'PAGADO').
--   - `order_status`: Estado de la orden (ej. 'PENDIENTE', 'COMPLETADO')

CREATE TABLE orders (
    order_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    client_id NUMBER REFERENCES person(person_id),
    waiter_id NUMBER REFERENCES person(person_id),
    table_number INTEGER,
    order_date DATE DEFAULT SYSDATE,
    total_amount NUMBER(10, 2) DEFAULT 0,
    payment_status VARCHAR2(20) DEFAULT 'PENDIENTE' CHECK (payment_status IN ('PENDIENTE', 'PAGADO', 'CANCELADO')),
    payment_type VARCHAR2(50),
    order_status VARCHAR2(20) DEFAULT 'PENDIENTE' CHECK (order_status IN ('PENDIENTE', 'EN_PROCESO', 'COMPLETADO', 'CANCELADO')),
    notes VARCHAR2(200),
    status VARCHAR2(10) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE'))
);


-- Tabla `order_detail`
-- Detalla los elementos individuales de cada orden.
-- Campos principales:
--   - `detail_id`: Identificador único para cada detalle de orden.
--   - `order_id`: Referencia a la orden en la tabla `orders`.
--   - `menu_id`: Referencia al plato en la tabla `menu`.
--   - `quantity`: Cantidad de un plato específico en la orden.
--   - `subtotal`: Subtotal para la cantidad especificada.
--   - `item_status`: Estado del elemento (ej. 'PENDIENTE', 'SERVIDO')

CREATE TABLE order_detail (
    detail_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    order_id NUMBER REFERENCES orders(order_id) ON DELETE CASCADE,
    menu_id NUMBER REFERENCES menu(menu_id),
    quantity NUMBER DEFAULT 1,
    unit_price NUMBER(10, 2),
    subtotal NUMBER(10, 2),
    item_status VARCHAR2(20) DEFAULT 'PENDIENTE' CHECK (item_status IN ('PENDIENTE', 'PREPARANDO', 'SERVIDO', 'CANCELADO')),
    notes VARCHAR2(200),
    status VARCHAR2(10) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'INACTIVE'))
);

-- Tabla `tables`
-- Almacena información sobre las mesas del restaurante.
-- Campos principales:
--   - `table_id`: Identificador único para cada mesa.
--   - `table_number`: Número de la mesa.
--   - `capacity`: Capacidad máxima de la mesa.
--   - `status`: Estado de la mesa (ej. 'DISPONIBLE', 'OCUPADO').
--   - `active_status`: Indica si la mesa está activa o inactiva.

CREATE TABLE tables (
    table_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    table_number INTEGER UNIQUE,
    capacity INTEGER,
    status VARCHAR2(20) DEFAULT 'DISPONIBLE' CHECK (status IN ('DISPONIBLE', 'OCUPADO', 'RESERVADO')),
    active_status VARCHAR2(10) DEFAULT 'ACTIVE' CHECK (active_status IN ('ACTIVE', 'INACTIVE'))
);

-- Tabla `reservation_detail`
-- Detalla los elementos específicos de una reserva.
-- Campos principales:
--   - `detail_id`: Identificador único para cada detalle de reserva.
--   - `menu_requested`: Nombre del menú solicitado.
--   - `menu_type`: Tipo de menú.
--   - `sub_total`: Subtotal del detalle de la reserva.

CREATE TABLE reservation_detail (
    detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    amount NUMBER,
    menu_requested VARCHAR2(100) NOT NULL,
    menu_type NUMBER,
    sub_total NUMBER(10, 2) CHECK (sub_total >= 0)
);

-- Tabla `reservations`
-- Registra las reservas realizadas en el restaurante.
-- Campos principales:
--   - `reservation_id`: Identificador único para cada reserva.
--   - `client_id`: Referencia a la tabla `person` para identificar al cliente que realiza la reserva.
--   - `reservation_date` y `reservation_time`: Fecha y hora de la reserva.
--   - `detalle_reserva_id_detalleReserva`: Referencia al detalle de reserva en la tabla `reservation_detail`.

CREATE TABLE reservations (
    reservation_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_id NUMBER REFERENCES person(person_id) ON DELETE CASCADE,
    reservation_date DATE,
    reservation_time TIMESTAMP,
    detalle_reserva_id_detalleReserva NUMBER REFERENCES reservation_detail(detail_id) ON DELETE CASCADE
);
